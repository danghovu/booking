// Code generated by MockGen. DO NOT EDIT.
// Source: booking.go
//
// Generated by this command:
//
//	mockgen -source=booking.go -destination=booking_mock.go -package=transporthttp
//

// Package transporthttp is a generated GoMock package.
package transporthttp

import (
	model "booking-event/internal/modules/booking/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBookingHandler is a mock of BookingHandler interface.
type MockBookingHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBookingHandlerMockRecorder
}

// MockBookingHandlerMockRecorder is the mock recorder for MockBookingHandler.
type MockBookingHandlerMockRecorder struct {
	mock *MockBookingHandler
}

// NewMockBookingHandler creates a new mock instance.
func NewMockBookingHandler(ctrl *gomock.Controller) *MockBookingHandler {
	mock := &MockBookingHandler{ctrl: ctrl}
	mock.recorder = &MockBookingHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingHandler) EXPECT() *MockBookingHandlerMockRecorder {
	return m.recorder
}

// CancelBooking mocks base method.
func (m *MockBookingHandler) CancelBooking(ctx context.Context, id, executorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBooking", ctx, id, executorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelBooking indicates an expected call of CancelBooking.
func (mr *MockBookingHandlerMockRecorder) CancelBooking(ctx, id, executorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBooking", reflect.TypeOf((*MockBookingHandler)(nil).CancelBooking), ctx, id, executorID)
}

// ConfirmBooking mocks base method.
func (m *MockBookingHandler) ConfirmBooking(ctx context.Context, userID, bookingID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmBooking", ctx, userID, bookingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmBooking indicates an expected call of ConfirmBooking.
func (mr *MockBookingHandlerMockRecorder) ConfirmBooking(ctx, userID, bookingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmBooking", reflect.TypeOf((*MockBookingHandler)(nil).ConfirmBooking), ctx, userID, bookingID)
}

// CreateBooking mocks base method.
func (m *MockBookingHandler) CreateBooking(ctx context.Context, booking model.CreateBookingRequest) (*model.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, booking)
	ret0, _ := ret[0].(*model.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingHandlerMockRecorder) CreateBooking(ctx, booking any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingHandler)(nil).CreateBooking), ctx, booking)
}

// GetBookingByID mocks base method.
func (m *MockBookingHandler) GetBookingByID(ctx context.Context, id int) (*model.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingByID", ctx, id)
	ret0, _ := ret[0].(*model.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingByID indicates an expected call of GetBookingByID.
func (mr *MockBookingHandlerMockRecorder) GetBookingByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingByID", reflect.TypeOf((*MockBookingHandler)(nil).GetBookingByID), ctx, id)
}
