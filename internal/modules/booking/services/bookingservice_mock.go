// Code generated by MockGen. DO NOT EDIT.
// Source: bookingservice.go
//
// Generated by this command:
//
//	mockgen -source=bookingservice.go -destination=bookingservice_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	model "booking-event/internal/modules/booking/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBookingRepository is a mock of BookingRepository interface.
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository.
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance.
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// CancelBooking mocks base method.
func (m *MockBookingRepository) CancelBooking(ctx context.Context, bookingID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBooking", ctx, bookingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelBooking indicates an expected call of CancelBooking.
func (mr *MockBookingRepositoryMockRecorder) CancelBooking(ctx, bookingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBooking", reflect.TypeOf((*MockBookingRepository)(nil).CancelBooking), ctx, bookingID)
}

// ConfirmBooking mocks base method.
func (m *MockBookingRepository) ConfirmBooking(ctx context.Context, booking *model.Booking, event *model.Event, bookingItems []model.BookingItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmBooking", ctx, booking, event, bookingItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmBooking indicates an expected call of ConfirmBooking.
func (mr *MockBookingRepositoryMockRecorder) ConfirmBooking(ctx, booking, event, bookingItems any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmBooking", reflect.TypeOf((*MockBookingRepository)(nil).ConfirmBooking), ctx, booking, event, bookingItems)
}

// CountBookingByUserID mocks base method.
func (m *MockBookingRepository) CountBookingByUserID(ctx context.Context, eventID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBookingByUserID", ctx, eventID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBookingByUserID indicates an expected call of CountBookingByUserID.
func (mr *MockBookingRepositoryMockRecorder) CountBookingByUserID(ctx, eventID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBookingByUserID", reflect.TypeOf((*MockBookingRepository)(nil).CountBookingByUserID), ctx, eventID, userID)
}

// CreateBooking mocks base method.
func (m *MockBookingRepository) CreateBooking(ctx context.Context, booking *model.Booking, bookingItems []model.BookingItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, booking, bookingItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingRepositoryMockRecorder) CreateBooking(ctx, booking, bookingItems any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingRepository)(nil).CreateBooking), ctx, booking, bookingItems)
}

// GetBookingByID mocks base method.
func (m *MockBookingRepository) GetBookingByID(ctx context.Context, id int) (*model.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingByID", ctx, id)
	ret0, _ := ret[0].(*model.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingByID indicates an expected call of GetBookingByID.
func (mr *MockBookingRepositoryMockRecorder) GetBookingByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingByID", reflect.TypeOf((*MockBookingRepository)(nil).GetBookingByID), ctx, id)
}

// MockBookingItemRepository is a mock of BookingItemRepository interface.
type MockBookingItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingItemRepositoryMockRecorder
}

// MockBookingItemRepositoryMockRecorder is the mock recorder for MockBookingItemRepository.
type MockBookingItemRepositoryMockRecorder struct {
	mock *MockBookingItemRepository
}

// NewMockBookingItemRepository creates a new mock instance.
func NewMockBookingItemRepository(ctrl *gomock.Controller) *MockBookingItemRepository {
	mock := &MockBookingItemRepository{ctrl: ctrl}
	mock.recorder = &MockBookingItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingItemRepository) EXPECT() *MockBookingItemRepositoryMockRecorder {
	return m.recorder
}

// CreateBookingItems mocks base method.
func (m *MockBookingItemRepository) CreateBookingItems(ctx context.Context, bookingItems []model.BookingItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookingItems", ctx, bookingItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBookingItems indicates an expected call of CreateBookingItems.
func (mr *MockBookingItemRepositoryMockRecorder) CreateBookingItems(ctx, bookingItems any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookingItems", reflect.TypeOf((*MockBookingItemRepository)(nil).CreateBookingItems), ctx, bookingItems)
}

// GetBookingItemsByBookingID mocks base method.
func (m *MockBookingItemRepository) GetBookingItemsByBookingID(ctx context.Context, bookingID int) ([]model.BookingItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingItemsByBookingID", ctx, bookingID)
	ret0, _ := ret[0].([]model.BookingItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingItemsByBookingID indicates an expected call of GetBookingItemsByBookingID.
func (mr *MockBookingItemRepositoryMockRecorder) GetBookingItemsByBookingID(ctx, bookingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingItemsByBookingID", reflect.TypeOf((*MockBookingItemRepository)(nil).GetBookingItemsByBookingID), ctx, bookingID)
}

// MockEventServiceForBooking is a mock of EventServiceForBooking interface.
type MockEventServiceForBooking struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceForBookingMockRecorder
}

// MockEventServiceForBookingMockRecorder is the mock recorder for MockEventServiceForBooking.
type MockEventServiceForBookingMockRecorder struct {
	mock *MockEventServiceForBooking
}

// NewMockEventServiceForBooking creates a new mock instance.
func NewMockEventServiceForBooking(ctrl *gomock.Controller) *MockEventServiceForBooking {
	mock := &MockEventServiceForBooking{ctrl: ctrl}
	mock.recorder = &MockEventServiceForBookingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventServiceForBooking) EXPECT() *MockEventServiceForBookingMockRecorder {
	return m.recorder
}

// GetEventByID mocks base method.
func (m *MockEventServiceForBooking) GetEventByID(ctx context.Context, id int) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, id)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockEventServiceForBookingMockRecorder) GetEventByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockEventServiceForBooking)(nil).GetEventByID), ctx, id)
}

// MockBookingEventTokenService is a mock of BookingEventTokenService interface.
type MockBookingEventTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockBookingEventTokenServiceMockRecorder
}

// MockBookingEventTokenServiceMockRecorder is the mock recorder for MockBookingEventTokenService.
type MockBookingEventTokenServiceMockRecorder struct {
	mock *MockBookingEventTokenService
}

// NewMockBookingEventTokenService creates a new mock instance.
func NewMockBookingEventTokenService(ctrl *gomock.Controller) *MockBookingEventTokenService {
	mock := &MockBookingEventTokenService{ctrl: ctrl}
	mock.recorder = &MockBookingEventTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingEventTokenService) EXPECT() *MockBookingEventTokenServiceMockRecorder {
	return m.recorder
}

// SelectAvailableToken mocks base method.
func (m *MockBookingEventTokenService) SelectAvailableToken(ctx context.Context, holderID int32, eventID, quantity int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAvailableToken", ctx, holderID, eventID, quantity)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAvailableToken indicates an expected call of SelectAvailableToken.
func (mr *MockBookingEventTokenServiceMockRecorder) SelectAvailableToken(ctx, holderID, eventID, quantity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAvailableToken", reflect.TypeOf((*MockBookingEventTokenService)(nil).SelectAvailableToken), ctx, holderID, eventID, quantity)
}
