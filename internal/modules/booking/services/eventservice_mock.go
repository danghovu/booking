// Code generated by MockGen. DO NOT EDIT.
// Source: eventservice.go
//
// Generated by this command:
//
//	mockgen -source=eventservice.go -destination=eventservice_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	model "booking-event/internal/modules/booking/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventRepository) CreateEvent(ctx context.Context, event model.Event, tokens []model.EventToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event, tokens)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepositoryMockRecorder) CreateEvent(ctx, event, tokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepository)(nil).CreateEvent), ctx, event, tokens)
}

// GetEventByID mocks base method.
func (m *MockEventRepository) GetEventByID(ctx context.Context, id int) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, id)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockEventRepositoryMockRecorder) GetEventByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockEventRepository)(nil).GetEventByID), ctx, id)
}

// QueryEvents mocks base method.
func (m *MockEventRepository) QueryEvents(ctx context.Context, query model.EventQuery) ([]model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEvents", ctx, query)
	ret0, _ := ret[0].([]model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEvents indicates an expected call of QueryEvents.
func (mr *MockEventRepositoryMockRecorder) QueryEvents(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEvents", reflect.TypeOf((*MockEventRepository)(nil).QueryEvents), ctx, query)
}

// UpdateEvent mocks base method.
func (m *MockEventRepository) UpdateEvent(ctx context.Context, event model.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventRepositoryMockRecorder) UpdateEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventRepository)(nil).UpdateEvent), ctx, event)
}

// MockEventTokenServiceForEvent is a mock of EventTokenServiceForEvent interface.
type MockEventTokenServiceForEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventTokenServiceForEventMockRecorder
}

// MockEventTokenServiceForEventMockRecorder is the mock recorder for MockEventTokenServiceForEvent.
type MockEventTokenServiceForEventMockRecorder struct {
	mock *MockEventTokenServiceForEvent
}

// NewMockEventTokenServiceForEvent creates a new mock instance.
func NewMockEventTokenServiceForEvent(ctrl *gomock.Controller) *MockEventTokenServiceForEvent {
	mock := &MockEventTokenServiceForEvent{ctrl: ctrl}
	mock.recorder = &MockEventTokenServiceForEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventTokenServiceForEvent) EXPECT() *MockEventTokenServiceForEventMockRecorder {
	return m.recorder
}

// CreateEventToken mocks base method.
func (m *MockEventTokenServiceForEvent) CreateEventToken(ctx context.Context, eventID, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventToken", ctx, eventID, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventToken indicates an expected call of CreateEventToken.
func (mr *MockEventTokenServiceForEventMockRecorder) CreateEventToken(ctx, eventID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventToken", reflect.TypeOf((*MockEventTokenServiceForEvent)(nil).CreateEventToken), ctx, eventID, userID)
}
